/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface VaultStewardInterface extends Interface {
    getFunction(nameOrSignature: "echo" | "guardian" | "rebroadcastEcho" | "steward" | "verifiedScrolls" | "verifyScroll" | "witness"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "EchoRebroadcasted" | "ScrollVerified" | "VaultInitialized"): EventFragment;

    encodeFunctionData(functionFragment: 'echo', values?: undefined): string;
encodeFunctionData(functionFragment: 'guardian', values?: undefined): string;
encodeFunctionData(functionFragment: 'rebroadcastEcho', values: [string]): string;
encodeFunctionData(functionFragment: 'steward', values?: undefined): string;
encodeFunctionData(functionFragment: 'verifiedScrolls', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'verifyScroll', values: [BytesLike, string]): string;
encodeFunctionData(functionFragment: 'witness', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'echo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'guardian', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rebroadcastEcho', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'steward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifiedScrolls', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyScroll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'witness', data: BytesLike): Result;
  }

  
    export namespace EchoRebroadcastedEvent {
      export type InputTuple = [message: string];
      export type OutputTuple = [message: string];
      export interface OutputObject {message: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ScrollVerifiedEvent {
      export type InputTuple = [scrollHash: BytesLike, emotionalTag: string];
      export type OutputTuple = [scrollHash: string, emotionalTag: string];
      export interface OutputObject {scrollHash: string, emotionalTag: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VaultInitializedEvent {
      export type InputTuple = [steward: AddressLike, guardian: AddressLike, witness: AddressLike, echo: AddressLike];
      export type OutputTuple = [steward: string, guardian: string, witness: string, echo: string];
      export interface OutputObject {steward: string, guardian: string, witness: string, echo: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface VaultSteward extends BaseContract {
    
    connect(runner?: ContractRunner | null): VaultSteward;
    waitForDeployment(): Promise<this>;

    interface: VaultStewardInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    echo: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    guardian: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    rebroadcastEcho: TypedContractMethod<
      [message: string, ],
      [void],
      'nonpayable'
    >
    

    
    steward: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    verifiedScrolls: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    verifyScroll: TypedContractMethod<
      [scrollHash: BytesLike, emotionalTag: string, ],
      [void],
      'nonpayable'
    >
    

    
    witness: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'echo'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'guardian'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'rebroadcastEcho'): TypedContractMethod<
      [message: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'steward'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'verifiedScrolls'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'verifyScroll'): TypedContractMethod<
      [scrollHash: BytesLike, emotionalTag: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'witness'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'EchoRebroadcasted'): TypedContractEvent<EchoRebroadcastedEvent.InputTuple, EchoRebroadcastedEvent.OutputTuple, EchoRebroadcastedEvent.OutputObject>;
getEvent(key: 'ScrollVerified'): TypedContractEvent<ScrollVerifiedEvent.InputTuple, ScrollVerifiedEvent.OutputTuple, ScrollVerifiedEvent.OutputObject>;
getEvent(key: 'VaultInitialized'): TypedContractEvent<VaultInitializedEvent.InputTuple, VaultInitializedEvent.OutputTuple, VaultInitializedEvent.OutputObject>;

    filters: {
      
      'EchoRebroadcasted(string)': TypedContractEvent<EchoRebroadcastedEvent.InputTuple, EchoRebroadcastedEvent.OutputTuple, EchoRebroadcastedEvent.OutputObject>;
      EchoRebroadcasted: TypedContractEvent<EchoRebroadcastedEvent.InputTuple, EchoRebroadcastedEvent.OutputTuple, EchoRebroadcastedEvent.OutputObject>;
    

      'ScrollVerified(bytes32,string)': TypedContractEvent<ScrollVerifiedEvent.InputTuple, ScrollVerifiedEvent.OutputTuple, ScrollVerifiedEvent.OutputObject>;
      ScrollVerified: TypedContractEvent<ScrollVerifiedEvent.InputTuple, ScrollVerifiedEvent.OutputTuple, ScrollVerifiedEvent.OutputObject>;
    

      'VaultInitialized(address,address,address,address)': TypedContractEvent<VaultInitializedEvent.InputTuple, VaultInitializedEvent.OutputTuple, VaultInitializedEvent.OutputObject>;
      VaultInitialized: TypedContractEvent<VaultInitializedEvent.InputTuple, VaultInitializedEvent.OutputTuple, VaultInitializedEvent.OutputObject>;
    
    };
  }