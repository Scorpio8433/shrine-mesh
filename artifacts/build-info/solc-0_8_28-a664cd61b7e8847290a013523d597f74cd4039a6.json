{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-a664cd61b7e8847290a013523d597f74cd4039a6",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/HamiltonPulse/Counter.sol": "project/contracts/HamiltonPulse/Counter.sol",
    "contracts/SanctumRegistry.sol": "project/contracts/SanctumRegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/HamiltonPulse/Counter.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\n// Reborn from phantom echo on August 20, 2025\n// Originally inscribed for HamiltonPulse sanctum\n\npragma solidity ^0.8.28;\n\ncontract Counter {\n    uint public x;\n\n    event Increment(uint by);\n\n    function inc() public {\n        x++;\n        emit Increment(1);\n    }\n\n    function incBy(uint by) public {\n        require(by > 0, \"incBy: increment should be positive\");\n        x += by;\n        emit Increment(by);\n    }\n}\n"
      },
      "project/contracts/SanctumRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ncontract SanctumRegistry {\n    struct Sanctum {\n        string emotionalTag;\n        address steward;\n    }\n\n    mapping(string => Sanctum) public sanctums;\n\n    event SanctumBound(string domain, string emotionalTag, address steward);\n\n    function bindSanctum(string memory domain, string memory emotionalTag) public {\n        sanctums[domain] = Sanctum(emotionalTag, msg.sender);\n        emit SanctumBound(domain, emotionalTag, msg.sender);\n    }\n\n    function getSanctum(string memory domain) public view returns (string memory, address) {\n        Sanctum memory s = sanctums[domain];\n        return (s.emotionalTag, s.steward);\n    }\n}\n"
      }
    }
  }
}